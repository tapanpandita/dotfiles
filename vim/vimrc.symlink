"""""""""""""""""""""""""""""""""""""""""""""""""
""Tapan's awesomely amazingly spectacular vimrc""
"""""""""""""""""""""""""""""""""""""""""""""""""

" This must be first, because it changes other options as side effect
" Use Vim defaults (much better!)
set nocompatible

filetype off

" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
"call pathogen#infect()
"call pathogen#helptags()

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'klen/python-mode'
Bundle 'sjbach/lusty'
Bundle 'bling/vim-airline'
Bundle 'kien/ctrlp.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'majutsushi/tagbar'
Bundle 'pangloss/vim-javascript'
Bundle 'plasticboy/vim-markdown'
Bundle 'jimenezrick/vimerl'
"Bundle 'myusuf3/numbers.vim'

" Bundle 'msanders/snipmate.vim'

filetype plugin indent on

" set rtp+=/Users/tapan/.vim/bundle/powerline/powerline/bindings/vim

" Change the mapleader from \ to ,
let mapleader=","
let maplocalleader="\\"

" ViM Airline settins
let g:airline_powerline_fonts=1
let g:airline_theme='badwolf'

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Set default file encoding to unicode
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=utf-8,latin1
endif

" General defaults
set tabstop=4     " a tab is four spaces
set backspace=indent,eol,start
                  " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set shiftwidth=4  " number of spaces to use for autoindenting
set expandtab     " use appropriate number of spaces when tabbing
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000  " remember more commands and search history
set undolevels=1000
                  " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class,*\/migrations\/*
set title         " change the terminal's title
set nobackup      " don't write a backup file
set ruler         " show the cursor position all the time
set pastetoggle=<F2>
                  " toggle paste mode
"set nonumber      " dont show line numbers, for python mode
set number
"set wrap          " wrap long lines, for python mode
nmap <f3> :set number! number?<cr>
                  " toggle showing line numbers
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
                  " highlight whitespace
nmap <silent> <Leader>/ :nohlsearch <CR>
                  " unhighlight search
set viminfo='20,\"50
                  " Tell vim to remember certain things when we exit
set hidden        " allow buffers to be hidden
set laststatus=2 " Always display the statusline in all windows
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
"set mouse=nicr    " mouse scroll in terminal vim
"nnoremap ; :     " Saves keystrokes
"set autochdir    " automatically changes directory to file in buffer
"set mouse=a      " Enable mouse support in console if you are into weird shit
"Magically move up and down in the same wrapped line!
nnoremap j gj
nnoremap k gk

" Easy window navigation
" map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
" map <C-l> <C-w>l

" Arrow keys are evil!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"save files if you forgot to sudo
cmap w!! %!sudo tee > /dev/null %

"folds
set foldmethod=indent
set foldcolumn=0
set foldlevel=0
set foldenable

" store backup and swp files in these dirs to not clutter working dir
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

"fix syntax highlighting for long files
autocmd BufEnter * :syntax sync minlines=2000

"show current command in bottom line
set showcmd

" Cool tab completion stuff while entering commands
set wildmenu
set wildmode=list:longest,full

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

"NERDTree shortcuts
"map <C-n> :NERDTreeToggle<CR>
"let NERDTreeIgnore = ['\.pyc$']

" Buffer shortcuts
" toggle recent buffers
map ,3 :b#<CR>
map ,n :bn<CR>
map ,p :bp<CR>

" CtrlP shortcuts
map <leader>t :CtrlP<CR>

" Tagbar Shortcut
map <c-a> :TagbarToggle<CR>

" Window shortcuts
nnoremap ,h <C-w>h
nnoremap ,j <C-w>j
nnoremap ,k <C-w>k
nnoremap ,l <C-w>l

" CommandT Shortcuts
"nnoremap <D-t> :CommandT<CR>

" Python mode overrides
let g:pymode_breakpoint_key = '<leader>pb'
let g:pymode_rope_complete_on_dot = 0
"let g:pymode_lint_checker = 'pylint'
let g:pymode_lint_checker = 'pyflakes'
let g:pymode_rope = 0
"let g:pymode_lint = 0

" Syntastic options
"let g:syntastic_mode_map={ 'mode': 'passive' }
"let g:syntastic_loc_list_height=5
"autocmd BufWritePost * :Errors
"autocmd FileWritePost * :Errors

" YCM options
let g:ycm_autoclose_preview_window_after_completion = 1

" Load rope plugin
let g:pymode_rope = 1

" ViM git gutter plugin
let g:gitgutter_enabled = 0
"nmap ,vg :ToggleGitGutter<cr>

" Lusty Juggler Shortcuts
map ,b ,lj
map ,g ,lg

" Python

" Clisp
autocmd Filetype lisp setlocal ts=2 sts=2 sw=2

"Go
au BufRead,BufNewFile *.go set filetype=go

" Javascript
"autocmd Filetype javascript setlocal ts=2 sts=2 sw=2


if has("autocmd")
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
endif

" Use system clipboard (only works if compiled with +x)
if $TMUX == ''
    set clipboard+=unnamed
endif

" Look and feel
set t_Co=256
set background=dark
colorscheme xoria256

" Highlight trailing whitespace in red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight overflow in red
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%80v.\+/
autocmd BufWinEnter * match OverLength /\s\+$/
autocmd InsertEnter * match OverLength /\s\+\%#\@<!$/
autocmd InsertLeave * match OverLength /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Simple re-format for minified Javascript
command! UnMinify call UnMinify()
function! UnMinify()
    %s/{\ze[^\r\n]/{\r/g
    %s/){/) {/g
    %s/};\?\ze[^\r\n]/\0\r/g
    %s/;\ze[^\r\n]/;\r/g
    %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
    normal ggVG=
endfunction

command! TrimWhitespace call TrimWhitespace()
function! TrimWhitespace()
    %s/\s\+$//g
endfunction

nmap <f4> :TrimWhitespace<cr>

" Need to figure tab stuff some day
"tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
